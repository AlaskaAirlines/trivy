trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: self
    - repository: templates
      type: git
      name: SoftwareTransformation/DevOps
      ref: refs/heads/master

variables:
- group: PipelineVariables
- group: Platform_Prod_Secrets
- name: SonarQubeExtraProps
  value: |  
    sonar.sources=.
    sonar.exclusions=**/*_test.go,**/deployment/**,**/templates/**
    sonar.tests=.
    sonar.test.inclusions=**/*_test.go
    sonar.test.exclusions=**/deployment/**
    sonar.go.coverage.reportPaths=**/coverage.out

stages: 
- stage: BuildAndPublish
  jobs:
    - job: BuildAndPush
      steps:
        - task: GoTool@0
          inputs:
            version: '1.15.5' 
          displayName: Install Go 1.15        
        # SonarQube Prepare CLI Task  
        - template: YAML/Builds/Security/SonarQubePrepareCLI.yml@templates  # Template reference
          parameters:
            ProjectKey: 'ecomm_platform-trivy' 
            ProjectName: 'ecomm_platform-trivy' 
            Scannedsources: '.' 
            ExtraProperties: '$(SonarQubeExtraProps)' 
        # - task: Bash@3
        #   displayName: 'Run Style Checker'
        #   inputs:
        #     targetType: 'inline'
        #     script: 'set +x; go get -v -u golang.org/x/lint/golint; GOPATH=/home/vsts/go make lint'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)'
        # - task: Bash@3
        #   displayName: 'Run Unit Tests'
        #   inputs:
        #     targetType: 'inline'
        #     script: 'set +x; make test'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)'
        # SonarQube SonarQubeAnalyzeAndPublish Task
        # - template: YAML/Builds/Security/SonarQubeAnalyzeAndPublish.yml@templates 
        #   parameters:
        #     ProjectKey: 'ecomm_platform-trivy' 
        #     ProjectName: 'ecomm_platform-trivy'
        - task: Bash@3  
          displayName: 'Compile Trivy Binary'
          inputs:
            targetType: 'inline'
            script: 'set +x; make build'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: DownloadSecureFile@1
          name: Service_Account_Credentials
          displayName: 'Download Service Account Credentials'
          inputs:
            secureFile: 'service_auth.json'            
        - script: cp $(Service_Account_Credentials.secureFilePath) $(Build.SourcesDirectory)/bin
          displayName: Place Service Creds
        - publish: $(Build.SourcesDirectory)
          artifact: Prepped
          displayName: 'Uploading Source With Image'        
        - publish: $(Build.SourcesDirectory)/bin
          artifact: binary
          displayName: Uploading Trivy Binary

- stage: DockerBuildAndValidate
  dependsOn: BuildAndPublish
  displayName: Compile Container Images
  jobs:
    - deployment: ReleaseImageU
      displayName: Docker Image Untrusted
      environment: 'trivy-build'
      pool:
        vmImage: 'ubuntu-latest' # Set value in Azure Dev Ops Build Pipeline
      strategy:
        runOnce:
          deploy:
            steps:
            # - script: |
            #     pushd $(Pipeline.Workspace)/Prepped/
            #     docker build --no-cache -t aagacrsandbox.azurecr.io/platform/trivy:$(Build.BuildNumber) .
            #     docker login -u "$(AagacrsandboxUser)" -p "$(AagacrsandboxKey)" aagacrsandbox.azurecr.io
            #     docker push aagacrsandbox.azurecr.io/platform/trivy:$(Build.BuildNumber)
            #   displayName: 'Building Docker Image Non Weasel'  
            - template: YAML/Builds/Docker/Docker-1-UntrustedRegistry.yml@templates
              parameters:
                Dockerimagename: 'platform/trivy'
                Dockerapppath: '$(Pipeline.Workspace)/Prepped/'
                Dockerfile: '$(Pipeline.Workspace)/Prepped/Dockerfile' 
                Dockerimagetag: '$(Build.BuildNumber)'

    - deployment: ReleaseImageT
      condition: succeeded()
      dependsOn: ReleaseImageU
      displayName: Docker Image Trusted
      environment: 'trivy-build'
      pool:
        name: '$(AquaPoolName)' # Set value in Azure Dev Ops Build Pipeline
      strategy:
        runOnce:
          deploy:
            steps:              
            - template: YAML/Builds/Docker/Docker-2-TrustedRegistry.yml@templates
              parameters:
                Dockerimagename: 'platform/trivy'
                Dockerimagetag: '$(Build.BuildNumber)'

    - deployment: DeployImageToGCR
      dependsOn: ReleaseImageT
      displayName: Pull Tested Image Push to GCR
      environment: 'trivy-build'
      pool:
        vmImage: 'ubuntu-latest' # Set value in Azure Dev Ops Build Pipeline
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadSecureFile@1
              name: Service_Account_Credentials
              displayName: 'Download Service Account Credentials'
              inputs:
                secureFile: 'service_auth.json'
            - powershell: |
                  Write-Host "ONE MINUTE Nap waiting on ACR.  Slow?"
                  Start-Sleep -s 60
                  docker login -u "$(AagacrsandboxUser)" -p "$(AagacrsandboxKey)" aagacrsandbox.azurecr.io
                  docker pull "aagacrsandbox.azurecr.io/platform/trivy:$(Build.BuildNumber)"
                  docker tag "aagacrsandbox.azurecr.io/platform/trivy:$(Build.BuildNumber)" "gcr.io/aag-anthos-poc17-app/trivy:$(Build.BuildNumber)"
                  docker tag "aagacrsandbox.azurecr.io/platform/trivy:$(Build.BuildNumber)" "gcr.io/aag-anthos-poc17-app/trivy:PreBaked"

                  gcloud auth activate-service-account --key-file $(Service_Account_Credentials.secureFilePath) --quiet
                  gcloud auth configure-docker "gcr.io" --quiet
                  docker push "gcr.io/aag-anthos-poc17-app/trivy:$(Build.BuildNumber)"                    
                  docker push "gcr.io/aag-anthos-poc17-app/trivy:PreBaked"
              displayName: 'Publish To GCR'

    - deployment: PublishToArtifactFeed
      condition: succeeded()
      dependsOn: DeployImageToGCR
      displayName: Publish Trivy to ASInternal      
      environment: 'trivy-build'
      pool:
        vmImage: 'windows-latest' # Set value in Azure Dev Ops Build Pipeline
      strategy:
        runOnce:
          deploy:
            steps:
              - task: UniversalPackages@0
                displayName: Publish Trivy to ASInternal
                inputs:
                  command: publish
                  publishDirectory: '$(Pipeline.Workspace)/binary/'
                  vstsFeedPublish: 'c005f067-8dd6-49a9-a11f-6ac99ea93a22' #ASInternal
                  vstsFeedPackagePublish: 'trivy'
                  versionOption: custom
                  versionPublish: '1.$(Build.BuildNumber)'
                  packagePublishDescription: 'AAG Trivy Implementation'            
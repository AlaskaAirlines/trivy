trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: self
    - repository: templates
      type: git
      name: SoftwareTransformation/DevOps
      ref: refs/heads/master

variables:
- group: PipelineVariables
- group: Platform_Prod_Secrets
- name: SonarQubeExtraProps
  value: |  
    sonar.sources=.
    sonar.exclusions=**/*_test.go,**/deployment/**,**/templates/**
    sonar.tests=.
    sonar.test.inclusions=**/*_test.go
    sonar.test.exclusions=**/deployment/**
    sonar.go.coverage.reportPaths=**/coverage.out

stages:
- stage: PrepForBuild
  displayName: 'Create Artifact for all the resources'
  jobs:
    - job: PrepforBuild
      pool: 
        vmImage: 'ubuntu-latest'
      steps:
      - publish: $(Build.SourcesDirectory)
        artifact: Prepped
        displayName: 'Uploading Prepped Sources' 
      
- stage: BuildAndPublish
  jobs:
    - job: BuildAndPush
      steps:
        # SonarQube Prepare CLI Task  
        # - template: YAML/Builds/Security/SonarQubePrepareCLI.yml@templates  # Template reference
        #   parameters:
        #     ProjectKey: 'ecomm_platform-starboard' 
        #     ProjectName: 'ecomm_platform-starboard' 
        #     Scannedsources: '.' 
        #     ExtraProperties: '$(SonarQubeExtraProps)' 
        # - task: Bash@3
        #   displayName: 'Run Style Checker'
        #   inputs:
        #     targetType: 'inline'
        #     script: 'set +x; go get -v -u golang.org/x/lint/golint; GOPATH=/home/vsts/go make lint'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)'
        # - task: Bash@3
        #   displayName: 'Run Unit Tests'
        #   inputs:
        #     targetType: 'inline'
        #     script: 'set +x; make unit-tests'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)'
        # SonarQube SonarQubeAnalyzeAndPublish Task
        # - template: YAML/Builds/Security/SonarQubeAnalyzeAndPublish.yml@templates 
        #   parameters:
        #     ProjectKey: 'ecomm_platform-starboard' 
        #     ProjectName: 'ecomm_platform-starboard'
        - task: Bash@3  
          displayName: 'Compile Trivy Binary'
          inputs:
            targetType: 'inline'
            script: 'set +x; make build-starboard-cli'
            workingDirectory: '$(System.DefaultWorkingDirectory)'

    - deployment: ReleaseImageU
      dependsOn: BuildAndTest
      displayName: Docker Image Untrusted
      environment: 'aer-test'
      pool:
        vmImage: 'ubuntu-latest' # Set value in Azure Dev Ops Build Pipeline
      strategy:
        runOnce:
          deploy:
            steps:
            - template: YAML/Builds/Docker/Docker-1-UntrustedRegistry.yml@templates
              parameters:
                Dockerimagename: 'flight-changes/aer'
                Dockerapppath: '$(Pipeline.Workspace)/Prepped/'
                Dockerfile: '$(Pipeline.Workspace)/Prepped/Dockerfile' 
                Dockerimagetag: '$(Build.BuildNumber)'

    - deployment: ReleaseImageT
      condition: succeeded()
      dependsOn: ReleaseImageU
      displayName: Docker Image Trusted
      environment: 'aer-test'
      pool:
        name: '$(AquaPoolName)' # Set value in Azure Dev Ops Build Pipeline
      strategy:
        runOnce:
          deploy:
            steps:              
            - template: YAML/Builds/Docker/Docker-2-TrustedRegistry.yml@templates
              parameters:
                Dockerimagename: 'flight-changes/aer'
                Dockerimagetag: '$(Build.BuildNumber)'

    - deployment: DeployImageToGCR
      dependsOn: ReleaseImageT
      displayName: Pull Tested Image Push to GCR
      environment: 'aer-test'
      pool:
        vmImage: 'ubuntu-latest' # Set value in Azure Dev Ops Build Pipeline
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadSecureFile@1
              name: Service_Account_Credentials
              displayName: 'Download Service Account Credentials'
              inputs:
                secureFile: 'service_auth.json'
            - powershell: |
                  Write-Host "ONE MINUTE Nap waiting on ACR.  Slow?"
                  Start-Sleep -s 60
                  docker login -u $(AagacrUser) -p $(AagacrKey) aagacr.azurecr.io
                  docker pull "aagacr.azurecr.io/flight-changes/aer:$(Build.BuildNumber)"
                  docker tag "aagacr.azurecr.io/flight-changes/aer:$(Build.BuildNumber)" "gcr.io/aag-anthos-poc17-app/flight-changes/aer:$(Build.BuildNumber)"

                  gcloud auth activate-service-account --key-file $(Service_Account_Credentials.secureFilePath) --quiet
                  gcloud auth configure-docker "gcr.io" --quiet
                  docker push "gcr.io/aag-anthos-poc17-app/flight-changes/aer:$(Build.BuildNumber)"                    
              displayName: 'Pull Tested Image Push to GCR'
    - job: PublishToArtifactFeed
      condition: succeeded()
      dependsOn: BuildAndPush
      displayName: Publish Starboard to ASInternal      
      pool:
        vmImage: 'windows-latest' # Set value in Azure Dev Ops Build Pipeline 
      steps:
        - download: current
          artifact: 'binary'
          displayName: Download Binary
        - task: UniversalPackages@0
          displayName: Publish Starboard to ASInternal
          inputs:
            command: publish
            publishDirectory: '$(Pipeline.Workspace)/binary/'
            vstsFeedPublish: 'c005f067-8dd6-49a9-a11f-6ac99ea93a22' #ASInternal
            vstsFeedPackagePublish: 'starboard'
            versionOption: custom
            versionPublish: '1.$(Build.BuildNumber)'
            packagePublishDescription: 'AAG Starboard Implementation'            